2009-12-24 'GoldOS V1.63' Jhuni <jhuni_x@yahoo.com>
	In this version the following changes have been made:
		
		The master is completely redesigned so that it only
		loads the files on demand, that way it does not load
		files in which I do not want to load.
		
		The event system is such that if you have a window that
		is not currently selected, that window will not
		take input from the keyboard.

2009-09-13 'GoldOS V1.61' Jhuni <jhuni_x@yahoo.com>
	In this version the following changes have been made:
	
		Appselector does not have the bugs, the cookies, and the
		go back button anymore so it should work much better.
	
		Menus work better on more things like the Taskbar,
		and the menus will fit into the screen.
	
		Desktop allows you to actually click on squares.
	
		Sudoko application allows interaction if you click on it and 
		use the number keys to place values
		
		Minesweeper application allows purely keyboard interface
		
		Chess application allows purely keyboard interface.
		
		Gnect and Gnometris properly tell you when you have lost the
		game.
		
2009-09-7 'GoldOS V1.6' Jhuni <jhuni_x@yahoo.com>
	In this version keyboard access is one of the most major things
	in which has been added. It was added to tictactoe and checkers.
	The tetris keyboard system has also been completely revamped.
	
	Internet Explorer finally has support for some applications, including
	chess, checkers, tictactoe, go, and minesweeper. The window manager
	even works a little bit.

2009-04-17 'GoldOS V1.45' Jhuni <jhuni_x@yahoo.com>
	Title: 'GoldOS application scalability'
		In GoldOS version 1.45 our major breakthrough is that we do
		not configure the pixel size of components in an application
		instead we base everything based on the host geometry so that
		our application looks good regardless of the size that
		is being used by the window manager.
		
		This is something that no other web desktop has really solved
		in an effective manner before. Our competitor Pysch Desktop
		often disables the ability to resize a window. We will never do
		this in GoldOS every single window has the buttons minimize,
		maximize, regardless of the applications preferences.
		
		Another breakthrough is we are moving to purely SVG image
		storage. SVG is merely converted to PNG because SVG support
		is poor	and even Firefox will not render it in a Canvas.
		The SVG might be useful later though because we may be able to
		use it if the browser support is increased or if we are running
		applications on the Desktop.

2009-04-12 'GoldOS V1.41' Jhuni <jhuni_x@yahoo.com>
	We have now removed references to pixel size and made it so that the
	size of the display is dependent on the geometry of the window.
	GoldOS can use either a custom window manager system, or GoldOS
	can be tuned to work with the window manager of the host operating
	system using window.innerWidth and the like. We have also increased
	cross-browser compatability to make it so that Opera works well.

2009-04-10 'GoldOS V1.4' Jhuni <jhuni_x@yahoo.com>
	Title: 'The GoldOS Build System!'
		We now use YAHOO.util.StyleSheet in order to load all
		CSS which means that CSS.Loader is deprecated. CSS.Loader
		meant that we had to load all CSS at the same time which
		is a serious disadvantage for the user/developer. Thank
		god for YAHOO. I don't know what we are going to do considering
		that they are messing things up in the next version of their
		library so that we probably won't use it anymore.

		CSS is combined with all JavaScript files into a single
		file that is minified JavaScript that will perform all the operations
		necessary for a particular executable application and in addition
		we can build .html files that contain the entire executable
		so that we can distribute it easily and quickly. (usually less
		then 100 kb)
		
		Now we prefer writing out our dependencies as an array as opposed
		to several JSAN.use statements.
		['MochiKit.Base','YAHOO','Sizzle']
		
		There is no JSAN statements anymore in the executables - the JSAN
		code is generated by the compiler from an array like above. This
		array is used to add options like server-side compilation. Images
		are now in SVG and menus are in XML.
		
		The bottom-line is we are no longer using JavaScript for everything
		and this adds countless new options to the user. JavaScript
		is not the best tool for doing everything.

2009-03-22 'GoldOS V1.33' Jhuni <jhuni_x@yahoo.com>
	We have now started to create Grid.js which will
	be a standard interface for working with two
	dimensional arrays throughout GoldOS. We have
	moved checkers, go, and minesweeper to this
	interface and sudoko will be next.

2009-03-20 'GoldOS v1.32' Jhuni <jhuni_x@yahoo.com>
	Fixed a bug in JSAN.js so that it runs in opera 9.0 now.
	Added new files Grid.LineSegment, Grid.Rect, and Grid.CoordMap

	Title: 'Greatly Revamped Codebase'
		Now in GoldOS all rectangles are declared with Grid.Rect. This
		is used as the basis of all windows and as the basis for
		all canvas controls. This adds consitency to the sytem
		and you don't have to overrun yourself with arguments.
		
		What this also means is you can now finally maximize a window.
		This means that the system actually looks like a modern desktop.
		We are starting to surpass Pysch desktop and our other competitiors.
		I have also posted to MochiKit about how to improve their 
		library so that we can integrate it more fully into 
		our operating system.
		
		The bottom line though is that our goal is to build our
		applications with the minimium of code possible. Our goal
		is not quantity as much as it is quality. After we get
		quality we will look for quantity.
	

2009-03-14 'GoldOS v1.3' Jhuni <jhuni_x@yahoo.com>
	I have made a window manager that is purely canvas based and it allows a rich GUI
	as such and in addition to this I have added a Lang.Random module based on Python,
	I have drastically restructured all the modules that are given so they are all
	much quicker now.

2009-02-15 'GoldOS v1.21' Jhuni <jhuni_x@yahoo.com>
	I have added a sudoko solver to the core and I have fixed a error in the minesweeper
	view files.

2009-01-25 'GoldOS v1.20' Jhuni <jhuni_x@yahoo.com>
	Added a ChangeLog and a lot more general documentation that I have written
	for developers, to make life easier for people going over the code.

2009-01-11  'GoldOS v1.15' Jhuni <jhuni_x@yahoo.com>
	In this version I decided to reorganize by moving files into two seperate directories:
	
		'./lib/view':
			This folder contains any .js file that knows of the existence of any DOM
			related content, or of the existence of HTML itself on the page.
		'./lib/core/':
			This all only know of the existence of the Core so they can be ran even
			if the JavaScript code is on some other platform.
		'./lib/Examples/'
			I also added an examples system to make it easier for people working 
			with my JSAN based modules. Hopefully in the future my JSAN modules 
			will have examples in a seperate repository so as to make things 
			better for application developers rather then library developers.

2009-01-04  'GoldOS v1.10' Jhuni <jhuni_x@yahoo.com>
	- Added general developer documentation on how to work without JSAN.
	- Ran a perl script that got all the documentation into a single folder ./pod/ and you can browse all of it
	via the ./html/ folder without having to deal with the Perlish documentation system.
	- Updated meta data for consistency and updated ./lib/ folder by adding more documentation and making the 
	system more consistent in terms of conventions. This is still a work in progress.

2009-01-03  'GoldOS v1.01' Jhuni <jhuni_x@yahoo.com>
	This is a basic fix to some of the previous features in GoldOS v1.0.

2009-01-01  'GoldOS v1.00' Jhuni <jhuni_x@yahoo.com>
	This is the first version of GoldOS released publicly it contains
	mostly games for applications: Tetris, Minesweeper, etc.
